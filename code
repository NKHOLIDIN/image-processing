!wget --no-check-certificate \
https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip \
-O /tmp/rockpaperscissors.zip

import zipfile,os
local_zip = '/tmp/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

import os
from sklearn.model_selection import train_test_split

data_dir = '/tmp/rockpaperscissors/rps-cv-images'
classes = ['rock', 'paper', 'scissors']

train_data = []
train_labels = []

for cls in classes:
    cls_dir = os.path.join(data_dir, cls)
    for img in os.listdir(cls_dir):
        img_path = os.path.join(cls_dir, img)
        train_data.append(img_path)
        train_labels.append(cls)

# Split dataset into train and validation sets
train_data, val_data, train_labels, val_labels = train_test_split(train_data, train_labels,
                                                                  test_size=0.4, random_state=42)

import pandas as pd
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Membuat DataFrame dari daftar path file gambar dan labelnya
train_df = pd.DataFrame({'filename': train_data, 'label': train_labels})
val_df = pd.DataFrame({'filename': val_data, 'label': val_labels})

# Inisialisasi ImageDataGenerator
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

val_datagen = ImageDataGenerator(rescale=1./255)

# Flow data menggunakan flow_from_dataframe
train_generator = train_datagen.flow_from_dataframe(
    train_df,
    x_col='filename',
    y_col='label',
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical'
)

val_generator = val_datagen.flow_from_dataframe(
    val_df,
    x_col='filename',
    y_col='label',
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical'
)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

model = Sequential([
    Conv2D(32, (3,3), activation='relu', input_shape=(150,150,3)),
    MaxPooling2D(2,2),
    Conv2D(64,(3,3), activation='relu'),
    MaxPooling2D(2,2),
    Conv2D(128,(3,3), activation='relu'),
    MaxPooling2D(2,2),
    Flatten(),
    Dense(512, activation='relu'),
    Dense(3, activation='softmax')
])
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics='accuracy')

history = model.fit(
    train_generator,
    steps_per_epoch=len(train_generator),
    epochs=10,
    validation_data=val_generator,
    validation_steps=len(val_generator)
)

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accurancy')
plt.legend()
plt.show

val_loss, val_acc = model.evaluate(val_generator, steps=len(val_generator))
print(f'Validation Accurancy: {val_acc}')

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accurancy')
plt.legend()
plt.show

val_loss, val_acc = model.evaluate(val_generator, steps=len(val_generator))
print(f'Validation Accurancy: {val_acc}')
